# Configuration file for Spa_SO_Calc.py
# Note that deleting entries from this configuration file will cause SO-CAL to stop working

# Dictionaries

dic_dir = ../Resources/dictionaries/Spanish/
adj_dict = ciao_adj_dict_spa.txt
adv_dict = ciao_adv_dict_spa.txt
noun_dict = ciao_noun_dict_spa.txt
verb_dict = ciao_verb_dict_spa.txt
int_dict = int_dict_spa.txt
extra_dict =
# the extra dictionary allows for additional (genre-specific) words that supplement
# or override the the definitions in the four main dictionaries. Each type should be under
# an appropriate heading, i.e. "verbs", "nouns", "adjectives", "adverbs", and "intensifiers"


# Flags

language = Spanish 
use_adjectives = True
use_nouns = True
use_verbs = True
use_adverbs = True
use_intensifiers = True
use_negation = True
use_comparatives = True
use_superlatives = True
use_multiword_dictionaries = True
use_extra_dict = False
use_XML_weighing = False
use_weight_by_location = False
use_irrealis = True # irrealis markers (e.g. modals) nullify the SO value of words
use_imperative = True # nullify words that appear in imperatives
use_subjunctive = True # nullify words that appear in subjunctives
use_conditional = True # nullify words that appear in conditionals
use_highlighters = True # highlighers amplify (or deamplify) the SO value of words
use_cap_int = True # intensify words in all caps
fix_cap_tags = True # try to fix mistagged capitalized words
use_exclam_int = True # intensify words in sentences with exclamation marks
use_quest_mod = True # don't use words that appear in questions
use_quote_mod = True # don't use words that appear in quotes
use_definite_assertion = True # Presence of definites indicates assertion, ignore irrealis 
use_clause_final_int = True # look for verb intensifiers at the edge of VPs
use_heavy_negation = True # multiply all negative words by a fixed amount
use_word_counts_lower = True # lower SO_value of words that appear often in text
use_word_counts_block = False # do not assign SO value to repeated words
use_blocking = True # a strong modifier will block items of opposite polarity
adv_learning = True # add to the adverb dictionary by using the adjective dictionary
limit_shift = False #limit negation shifting, no shifting beyond switched value
polarity_switch_neg = False # switch polarity on negative items instead of shift
neg_negation_nullification = True # the negation of negative terms simply nullifies them.
simple_SO = False # Treat the SO of words as binary rather than as a continuous value
                 # Also simplifies intensification to +1 -1
restricted_neg = [AQ : True, RG : True, NC : True, VM : True]
use_boundary_words = True # disable only if preprocessor already segments into clauses
use_boundary_punctuation = True # disable only if preprocessor already segments into clauses

# Modifiers

adj_multiplier = 1 #multiply all adjectives by this amount
adv_multiplier = 1 #mulitply all adverbs by this amount
verb_multiplier = 1 #multiply all verbs by this amount
noun_multiplier = 1 #multiply all nouns by this amount
int_multiplier = 1 # multiply all intensified word groups by this amount
neg_multiplier = 1.5 # multiply all negative word groups by this amount
capital_modifier = 2 # multiply all fully capitalized words by this amount
exclam_modifier = 2 # multiply words appearing in exclamations by this amount
verb_neg_shift = 4 # shift negated verbs by this amount
noun_neg_shift = 4 # shift negated nouns by this amount
adj_neg_shift = 4 # shift negated adjectives by this amount
adv_neg_shift = 4 # shift negated adverbs by this amount
blocker_cutoff = 3 # lowest (absolute) SO value that will block opposite polarity


# Ouput

output_calculations = True # output the calculation of SO to richout
output_sentences = True # output the SO_Value for each sentence in text to richout
output_unknown = False # unknown closed-class words will be outputed to search
output_used = False # used closed-class words will be outputed to search
output_used_lemma = False # for used words, output the lower-case lemma
search = [] # search can be used to optionally output sentences with certain words
contain_all_words = True # only sentences that contain all search words are outputed

# Lists

highlighters = [pero : 2, aunque: .5] # these words increase or decrease the SO weight of words later in a sentence
irrealis = [deber, querer, poder, esperar, suponer, dudar] #irrealis markers
boundary_words = [mas, pero, y, o, aunque, porque, que, cuando, si, quien, quienes, cual, cuales, cuyo, cuya, cuyas, cuyos, pues, entonces, donde, dondequiera] #these words stop a backward search for negators, highlighters, modifier blockers, and irrealis blockers
weight_tags= [topic : 1.5, off-topic : .5, nucleus : 1.5, satellite : .5] # words contained within XML tags with these names will be weighed 
weights_by_location = [0-1/5 :.3, 4/5-1 : .3] # words within fraction range will be weighed